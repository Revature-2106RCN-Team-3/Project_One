{"version":3,"sources":["components/images/pics/peace.png","components/images/pics/logo_name.png","components/images/pics/safeSpace.png","components/carousel.tsx","LoginCognito.ts","components/Login/Login.tsx","redux/actions/socialPostActions.ts","components/Register/Register.tsx","components/images/pics/logo.png","components/Navigation/Navigation.tsx","components/socialPost/SocialPost.tsx","components/socialPost/PostForm.tsx","components/socialPost/SocialPostList.tsx","App.tsx","redux/action-types/index.ts","redux/reducers/socialPostReducers.ts","redux/reducers/errorReducer.ts","redux/reducers/loadingReducer.ts","redux/reducers/loginRegReducer.ts","redux/reducers/index.ts","redux/store.ts","index.tsx"],"names":["Carousel","className","src","peace","alt","logo_name","safeSpace","userPool","CognitoUserPool","UserPoolId","ClientId","newUserAttribute","name","value","CognitoUserAttribute","Name","Value","UserAttributeNames","createUserAttributeList","email","firstName","lastName","birthDate","phoneNumber","nickName","preferredUserName","profile","NotLoggedInError","message","retryFunc","this","Error","Login","userName","password","Promise","resolve","reject","signUp","err","result","remember","console","log","user","CognitoUser","Username","Pool","authenticateUser","getUsername","getPassword","getValidationData","getClientMetadata","onSuccess","session","warn","currentUser","onFailure","getSignInUserSession","isValid","undefined","getLoggedInUser","getUserName","jsonifyTokens","JSON","stringify","acToken","getAccessToken","idToken","getIdToken","rfToken","getRefreshToken","getAttributes","getUserAttributes","attributes","filter","attrib","getAttribute","oldPassword","newPassword","changePassword","res","String","logout","signOut","deleteUser","PostAction","LoginComponent","useState","username","setUsername","setPassword","isPasswordVisible","setPasswordVisible","dispatch","useDispatch","error","useSelector","state","login","useEffect","history","useHistory","submitHandler","e","a","preventDefault","LoginCognito","then","signUpResult","push","catch","onSubmit","htmlFor","type","id","autoComplete","onChange","target","trim","required","onClick","href","Date","getFullYear","Register","first_name","setFirst","last_name","setLast","birthday","setBirthday","phone","setPhone","split","createAccount","min","max","now","placeholder","Navbar","onLogout","pathname","useLocation","includes","isLoggedIn","logo","width","height","role","tabindex","setPost","posts","SET_POST","payload","SocialPostComponent","renderList","allPosts","map","post","post_text","post_id","parent_post_id","post_date_time","main_post","like","dislikes","Row","Col","sm","md","size","offset","Card","CardBody","CardTitle","tag","CardText","PostForm","props","postText","setPostText","helpMe","axios","get","response","data","Items","fetchPosts","x","socialPosts","onPost","FormGroup","Label","for","Input","rows","Button","SocialPostPage","useForceUpdateCall","setValue","useForceUpdate","SocialPost","App","ActionType","path","component","exact","render","SocialPostList","initialState","socialPostReducer","action","initState","authError","errorReducer","SET_AUTH_ERR","CLEAR_AUTH_ERR","isLoadingAuth","loadingReducer","SET_AUTH_LOADING","authenticated","loading","setError","success","loginReducer","SET_USERNAME","SET_LOADING","LOGOUT_START","LOGIN_SUCCESS","SET_ERROR","reducers","combineReducers","addPost","ADD_POST","getComments","SELECT_POST","REMOVE_SELECTED_POST","loginRegReducer","w","window","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","Amplify","configure","Authenticate","mandatorySignId","region","REGION","userPoolId","USER_POOL_ID","clientId","CLIENT_ID","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0abe79b3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/peace.19668b8d.png\";","export default __webpack_public_path__ + \"static/media/logo_name.0d4141c2.png\";","export default __webpack_public_path__ + \"static/media/safeSpace.cf6624ed.png\";","import peace from './images/pics/peace.png';\r\nimport logo_name from './images/pics/logo_name.png';\r\nimport safeSpace from './images/pics/safeSpace.png';\r\nconst Carousel: React.FC = () => {\r\n    return (\r\n        <div className=\"carousel slide\" data-bs-ride=\"carousel\">\r\n            <div className=\"carousel-inner\">\r\n                <div className=\"carousel-item active\">\r\n                    <img src={peace} className=\"d-block w-100\" alt=\"peace\" />\r\n                </div>\r\n                <div className=\"carousel-item\">\r\n                    <img src={logo_name} className=\"d-block w-100\" alt=\"logo_name\" />\r\n                </div>\r\n                <div className=\"carousel-item\">\r\n                    <img src={safeSpace} className=\"d-block w-100\" alt=\"people\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Carousel;\r\n","import {CognitoUser, CognitoUserAttribute, CognitoUserPool, CognitoUserSession, ISignUpResult} from \"amazon-cognito-identity-js\";\r\n// Reference to our user pool, this is in the wrong region but that doesn't matter since it doesn't need a vpc.\r\nconst userPool = new CognitoUserPool({\r\n\r\n    UserPoolId: \"us-east-2_UW3QxKzWj\",\r\n    ClientId: \"bis6ou4bf4k7i548libkei128\",\r\n\r\n\r\n});\r\n\r\n// Sugar to create a new user attribute for the big lists below.\r\nfunction newUserAttribute(name: string, value: string): CognitoUserAttribute{\r\n\r\n    return new CognitoUserAttribute({\r\n\r\n        Name: name,\r\n        Value: value\r\n\r\n     });\r\n\r\n}\r\n/**\r\n * A list of sensible, self explanitory names for the cognito attributes we are using.\r\n * \r\n * @since 0.0.0\r\n */\r\nexport class UserAttributeNames{\r\n    \r\n    public static readonly email = \"email\";\r\n    public static readonly firstName = \"given_name\";\r\n    public static readonly lastName = \"family_name\";\r\n    public static readonly birthDate = \"birthdate\";\r\n    public static readonly phoneNumber = \"phone_number\";\r\n    public static readonly nickName = \"nickname\";\r\n    public static readonly preferredUserName = \"preferred_username\";\r\n    public static readonly profile = \"profile\";\r\n\r\n}\r\n\r\n/**\r\n * Creates a populated list of the attributes we use for our user profiles from the given arguments.\r\n * \r\n * @since 0.0.0\r\n */\r\nfunction createUserAttributeList(email: string, firstName: string, lastName: string,\r\n    birthDate: string, phoneNumber: string, nickName: string, preferredUserName: string,\r\n    profile: string){\r\n\r\n        return [\r\n\r\n            newUserAttribute(UserAttributeNames.email, email),\r\n            newUserAttribute(UserAttributeNames.firstName, firstName),\r\n            newUserAttribute(UserAttributeNames.lastName, lastName),\r\n            newUserAttribute(UserAttributeNames.birthDate, birthDate),\r\n            newUserAttribute(UserAttributeNames.phoneNumber, phoneNumber),\r\n            newUserAttribute(UserAttributeNames.nickName, nickName),\r\n            newUserAttribute(UserAttributeNames.preferredUserName, preferredUserName),\r\n            newUserAttribute(UserAttributeNames.profile, profile)\r\n\r\n        ];\r\n\r\n    }\r\n\r\n/**\r\n * The error generated by any method that expects a user to be logged in, indicating that the caller\r\n * should then call the login function before trying again.\r\n * \r\n * @since 0.0.0\r\n */\r\nexport class NotLoggedInError <T> extends Error{\r\n\r\n    private readonly retryFunc: () => Promise<T>;\r\n\r\n    /**\r\n     * @param message The description of why this error is being thrown.\r\n     * @param retryFunc A reference the the method which is throwing this error.\r\n     * \r\n     * @since 0.0.0\r\n     */\r\n    constructor(message: string, retryFunc: () => Promise<T>){\r\n\r\n        super(message);\r\n        this.retryFunc = retryFunc;\r\n        \r\n    }\r\n\r\n    /**\r\n     * Calls the method which threw the error again.\r\n     * \r\n     * @since 0.0.0\r\n     */\r\n    public retry(): Promise<T>{return this.retryFunc();}\r\n\r\n}\r\n\r\n/**\r\n * The collection of static methods used to control the login and user profile interactions.\r\n * \r\n * @since 0.0.0\r\n */\r\nexport default class Login{\r\n\r\n    private static currentUser: CognitoUser | undefined;\r\n\r\n    /**\r\n     * Creates a new account requiring with the given information.\r\n     * \r\n     * @since 0.0.0\r\n     */\r\n    public static async createAccount(userName: string, password: string, email: string,\r\n         firstName: string, lastName: string, birthDate: string, phoneNumber: string,\r\n          nickName: string, preferredUserName: string, profile: string): Promise<ISignUpResult>{\r\n\r\n        return new Promise<ISignUpResult>((resolve, reject) => {\r\n            \r\n            userPool.signUp(userName, password, \r\n                createUserAttributeList(email, firstName, lastName, birthDate, phoneNumber, nickName,\r\n                    preferredUserName, profile),\r\n                [], (err, result) => {\r\n\r\n                if(err || !result)\r\n                    return reject(err);\r\n\r\n                resolve(result);\r\n\r\n            });\r\n\r\n        });\r\n\r\n    }\r\n    \r\n    /**\r\n     * Logs in to the user profile associated with the given username.\r\n     * \r\n     * @param userName The username or email for the profile's account.\r\n     * @param password The profile's password in plain text.\r\n     * @param remember Whether or not to store the temporary login token between sessions. TODO unimplemented\r\n     * \r\n     * @since 0.0.0\r\n     */\r\n    public static async login(userName: string, password: string, remember: boolean): Promise<CognitoUser>{\r\n        console.log(\"starting login in loginCognito\");\r\n        return new Promise((resolve, reject) => {\r\n\r\n            const user = new CognitoUser({\r\n\r\n                Username: userName,\r\n                Pool: userPool\r\n    \r\n            });\r\n            console.log(userName, password, \" authenticating user\")\r\n            user.authenticateUser({\r\n\r\n                getUsername: () => userName,\r\n                getPassword: () => password,\r\n                getValidationData: () => [],\r\n                //@ts-ignore\r\n                getClientMetadata: () => ({})\r\n    \r\n            }, {\r\n    \r\n                onSuccess: (session: CognitoUserSession) => {\r\n\r\n                    if(remember)\r\n                        console.warn(\"Login storage unimplemented.\");\r\n\r\n                    this.currentUser = user;\r\n                    resolve(user);\r\n\r\n                },\r\n                onFailure: reject\r\n    \r\n            });\r\n\r\n        });\r\n\r\n    }\r\n\r\n    public static isLoggedIn(): boolean{\r\n\r\n        //@ts-ignore\r\n        return this.currentUser && this.currentUser.getSignInUserSession()?.isValid();\r\n\r\n    }\r\n\r\n    /**\r\n     * @param retryFunc A function to call after successfully logging in and calling\r\n     * NotLoggedInError.retry.\r\n     * \r\n     * @returns The current logged in user. If there is no logged in user, this method will attempt\r\n     * to use a previously stored temporary login token. If both of these routes fail, an error is\r\n     * thrown.\r\n     * \r\n     * @throws NotLoggedInError if the user is not logged in, and the stored login token is either\r\n     * invalid or missing.\r\n     * \r\n     * @since 0.0.0\r\n     */\r\n    public static async getLoggedInUser<T>(retryFunc?: () => Promise<T>) : Promise<CognitoUser>{\r\n\r\n        if(this.currentUser && this.currentUser.getSignInUserSession()?.isValid())\r\n            return Promise.resolve(this.currentUser);\r\n\r\n        /*if(loginWasStored)\r\n            return new Promise((resolve, reject) => {\r\n\r\n                if(storeLoginValid)\r\n                    resolve(storedLogin);\r\n\r\n                reject(new NotLoggedInError(\"Stored login was expired or otherwise invalid.\"));\r\n\r\n            });*/\r\n\r\n        return Promise.reject(new NotLoggedInError(\"No stored login.\", retryFunc || (() => Promise.resolve(undefined))));\r\n\r\n    }\r\n\r\n    /**\r\n     * @return The user's name.\r\n     * \r\n     * @throws NotLoggedInError If the user is not logged in.\r\n     * \r\n     * @since 0.0.0\r\n     */\r\n    public static async getUserName(): Promise<string>{\r\n\r\n        const user: CognitoUser = await this.getLoggedInUser(this.getUserName);\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            resolve(user.getUsername());\r\n        \r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * @return The username and login tokens converted to a JSON string.\r\n     * \r\n     * @throws NotLoggedInError If the user is not logged in.\r\n     * \r\n     * @since 0.0.0\r\n     */\r\n    public static async jsonifyTokens(): Promise<string>{\r\n\r\n        const user: CognitoUser = await this.getLoggedInUser(this.jsonifyTokens);\r\n        const session: CognitoUserSession | null = user.getSignInUserSession();\r\n\r\n        if(!session)\r\n            throw Error(\"Unreachable.\");\r\n\r\n        return JSON.stringify({\r\n\r\n            userName: user.getUsername(),\r\n            acToken: session.getAccessToken(),\r\n            idToken: session.getIdToken(),\r\n            rfToken: session.getRefreshToken()\r\n\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * @return All of the user's profile attributes.\r\n     * \r\n     * @throws NotLoggedInError If the user is not logged in.\r\n     * \r\n     * @since 0.0.0\r\n     */\r\n    public static async getAttributes(): Promise<CognitoUserAttribute[]>{\r\n\r\n        const user: CognitoUser = await this.getLoggedInUser(this.getAttributes);\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            user.getUserAttributes((err, attributes) => {\r\n\r\n                if(err || !attributes)\r\n                    return reject(err);\r\n\r\n                resolve(attributes);\r\n\r\n            });\r\n        \r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * @param name The name of the attribute to retrieve.\r\n     * \r\n     * @return The user's profile attribute with the given name.\r\n     * \r\n     * @throws Error If no attribute with the given name exists.\r\n     * @throws NotLoggedInError If the user is not logged in.\r\n     * \r\n     * @since 0.0.0\r\n     */\r\n    public static async getAttribute(name: string): Promise<CognitoUserAttribute>{\r\n\r\n        try{\r\n\r\n            return (await this.getAttributes()).filter(attrib => attrib.Name === name)[0] ||\r\n            (() => {throw new Error(`No such attribute: ${name}`)})();\r\n\r\n        }catch(err){\r\n\r\n            if(err instanceof NotLoggedInError)\r\n                throw new NotLoggedInError(err.message, () => {\r\n\r\n                    return this.getAttribute(name);\r\n\r\n                });\r\n\r\n            throw err;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @return The user's nickname attribute.\r\n     * \r\n     * @throws NotLoggedInError If the user is not logged in.\r\n     * \r\n     * @since 0.0.0\r\n     */\r\n    public static async getNickname(){\r\n\r\n        return await this.getAttribute(UserAttributeNames.nickName);\r\n\r\n    }\r\n\r\n    /**\r\n     * Changes the user's profile password if they know the current password.\r\n     * \r\n     * @param oldPassword The user's current profile password.\r\n     * @param newPassword The new password to set as the user's profile password.\r\n     * \r\n     * @return \"SUCCESS\" if the password is successfully changed.\r\n     * \r\n     * @throws NotLoggedInError If the user is not logged in.\r\n     * \r\n     * @since 0.0.0\r\n     */\r\n    public static async changePassword(oldPassword: string, newPassword: string){\r\n\r\n        const user: CognitoUser = await this.getLoggedInUser(() => {\r\n\r\n            return this.changePassword(oldPassword, newPassword);\r\n\r\n        });\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            user.changePassword(oldPassword, newPassword, (err, res) => {\r\n\r\n                if(err)\r\n                    return reject(err);\r\n\r\n                resolve(String(res));\r\n\r\n            });\r\n\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Allows the user to attempt to reset their password using their email.\r\n     * \r\n     * @return Something if the forgot password reset succeeds.\r\n     * \r\n     * @throws Error If the forgot password reset fails.\r\n     * \r\n     * @since 0.0.0\r\n     */\r\n    /*public static async forgotPassword(): Promise<any>{\r\n\r\n        const user: CognitoUser = await this.getLoggedInUser(this.forgotPassword);\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            user.forgotPassword({\r\n\r\n                onSuccess: resolve,\r\n                onFailure: reject\r\n\r\n            });\r\n\r\n        });\r\n\r\n    }*/\r\n\r\n    /**\r\n     * @return Nothing, but promise callbacks will run after the logout is complete.\r\n     * \r\n     * @throws NotLoggedInError If the user is not logged in.\r\n     * \r\n     * @since 0.0.0\r\n     */\r\n    public static async logout(): Promise<undefined>{\r\n\r\n        const user: CognitoUser = await this.getLoggedInUser(this.logout);\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            user.signOut(() => {\r\n\r\n                resolve(undefined);\r\n\r\n            });\r\n\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * @return The success message if successful.\r\n     * \r\n     * @throws Error If deleting the use fails.\r\n     * @throws NotLoggedInError If the user is not logged in.\r\n     * \r\n     * @since 0.0.0\r\n     */\r\n    public static async deleteUser(): Promise<string>{\r\n\r\n        const user: CognitoUser = await this.getLoggedInUser(this.deleteUser);\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            user.deleteUser((err, res) => {\r\n\r\n                if(err)\r\n                    return reject(err);\r\n\r\n                resolve(String(res));\r\n\r\n            });\r\n\r\n        });\r\n\r\n    }\r\n\r\n}\r\n","import React, { FormEvent, useState, useEffect } from \"react\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport { RootStore } from '../../redux/store';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { CognitoUser, AuthenticationDetails, CognitoUserPool } from \"amazon-cognito-identity-js\";\r\nimport Carousel from \"../carousel\";\r\nimport './Login.css';\r\nimport LoginCognito from \"../../LoginCognito\";\r\n\r\nconst poolData = {\r\n    UserPoolId: \"us-east-2_UW3QxKzWj\",\r\n    ClientId: \"bis6ou4bf4k7i548libkei128\",\r\n};\r\n\r\nconst userPool = new CognitoUserPool(poolData);\r\n\r\nconst LoginComponent: React.FC = () => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [isPasswordVisible, setPasswordVisible] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n    const { error } = useSelector((state: RootStore) => state.login);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            if(error) {\r\n                dispatch('');\r\n            }\r\n        }\r\n    }, [error, dispatch]);\r\n\r\n    const usernameChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        //get rid of whitespaces\r\n        const value = e.target.value.trim();\r\n        setUsername(value);\r\n    };\r\n\r\n    const passwordChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = e.target.value;\r\n        setPassword(value);\r\n    };\r\n\r\n    const history = useHistory();\r\n\r\n    const routeChange = () => {\r\n        let path = '/posts';\r\n        history.push(path);\r\n    }\r\n    \r\n    const submitHandler = async (e: FormEvent) => {\r\n        e.preventDefault();\r\n        console.log(username, password);\r\n        LoginCognito.login(username, password, false).then((signUpResult: CognitoUser) => {\r\n               // Signup complete, redirect to somewhere\r\n               routeChange();\r\n            }).catch(console.error);\r\n        /*setLoading(true);\r\n        await dispatch(login({ username, password }, () => {setLoading(false)}));\r\n        window.location.reload();*/\r\n    }\r\n\r\n    return(\r\n        <div className=\"login row bg-dark\">\r\n            <div className=\"col-6 ps-5 mt-5 mb-5\">\r\n                <Carousel />\r\n            </div>\r\n            <div className=\"col-6 justify-content-end mb-5 ps-5 text-light\">\r\n                    <form className=\"text-center\" onSubmit={submitHandler}>\r\n                        <div className=\"form-group mb-3\">\r\n                            <br />\r\n                            <br />\r\n                            <h1>Login</h1>\r\n                            <br />\r\n                            <label htmlFor=\"username\" className=\"form-label\">\r\n                                <h5>Username</h5>\r\n                            <input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            id=\"username\"\r\n                            autoComplete=\"username\"\r\n                            value={username}\r\n                            onChange={usernameChangeHandler}\r\n                            required\r\n                            />\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"form-group mb-3\">\r\n                            <label htmlFor=\"password\" className=\"form-label\">\r\n                                <h5>Password</h5>\r\n                        <div className=\"row g-3\">\r\n                            <div className=\"col-11\">\r\n                            <input\r\n                            className=\"form-control\"\r\n                            type={isPasswordVisible ? \"text\" : \"password\"}\r\n                            id=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            aria-describedby=\"eye\"\r\n                            onChange={passwordChangeHandler}\r\n                            value={password}\r\n                            required\r\n                            />\r\n                            </div>\r\n                            <div className=\"col-1\">\r\n                                {isPasswordVisible ? (\r\n                                    <i className=\"bi bi-eye-fill\" \r\n                                    id=\"eye\" \r\n                                    onClick={() => setPasswordVisible(false)}\r\n                                    ></i>\r\n                                ) : (\r\n                                    <i className=\"bi bi-eye-slash\"\r\n                                    id=\"eye-slash\"\r\n                                    onClick={() => setPasswordVisible(true)}\r\n                                    ></i>\r\n                                )}\r\n                            </div>\r\n                            </div>\r\n                            </label>\r\n                        </div>\r\n                        <br />\r\n                        <div className=\"form-group\">\r\n                            <button className=\"btn btn-lg btn-outline-secondary\" type=\"submit\">Login</button>\r\n                        </div>\r\n                        <br />\r\n                        <a href=\"/signup\" className=\"link-light\">I don't have an account</a>\r\n                    </form>\r\n                    <br />\r\n                    <p className=\"bg-dark text-muted text-center\">&copy; Copyright {new Date().getFullYear()} Social Justice Warriors</p>\r\n                    </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default LoginComponent;","import { IPost } from \"../../models/socialPostModel\";\r\n\r\nexport enum PostAction {\r\n    // All you groovy post related actions\r\n    SET_POST = 'SET_POST',\r\n    ADD_POST = 'ADD_POST',\r\n    REMOVE_SELECTED_POST = 'REMOVE_POST',\r\n    EDIT_POST = 'EDIT_POST',\r\n    DELETE_POST = 'DELETE_POST',\r\n    SELECT_POST = 'SELECT_POST',\r\n    LIKE_POST = 'LIKE_POST',\r\n    DISLIKE_POST = 'DISLIKE_POST',\r\n    REPORT_POST = 'REPORT_POST',\r\n    GET_COMMENTS = 'GET_COMMENTS',\r\n}\r\n\r\nexport interface IPostActions {\r\n    type: PostAction,\r\n    payload: {posts: IPost}\r\n}\r\n\r\nexport interface IAppActions extends IPostActions {\r\n    type: PostAction,\r\n    payload: {posts:IPost}\r\n}\r\n\r\nexport const setPost = (posts: IPost) => (<const>{\r\n        type: PostAction.SET_POST,\r\n        payload: posts,\r\n});\r\n\r\nexport const getcomments = (posts: IPost) => (<const>{\r\n    type: PostAction.GET_COMMENTS,\r\n    payload: posts,\r\n});\r\n\r\nexport const addPost = (posts: IPost) => (<const>{\r\n    type: PostAction.ADD_POST,\r\n    payload: posts,\r\n});\r\n\r\nexport const selectedPost = (postId: string) => {\r\n    return{ \r\n        type: PostAction.SELECT_POST,\r\n        payload: postId,\r\n    };\r\n};\r\n\r\nexport const removeSelectedPost = () => {\r\n    return{ \r\n        type: PostAction.REMOVE_SELECTED_POST,\r\n    };\r\n};","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { CognitoUser, AuthenticationDetails, CognitoUserPool, ISignUpResult } from \"amazon-cognito-identity-js\";\r\nimport { CreateUser, signup } from '../../redux/actions/logRegAction';\r\nimport axios from \"../../../axiosConfig\";\r\nimport Carousel from \"../carousel\";\r\nimport { RootStore } from \"../../redux/store\";\r\nimport Login from \"../../LoginCognito\";\r\n\r\nconst poolData = {\r\n    UserPoolId: \"us-east-2_UW3QxKzWj\",\r\n    ClientId: \"bis6ou4bf4k7i548libkei128\",\r\n};\r\n\r\nconst userPool = new CognitoUserPool(poolData);\r\n\r\n\r\nconst Register = (): any => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [first_name, setFirst] = useState('');\r\n    const [last_name, setLast] = useState('');\r\n    const [birthday, setBirthday] = useState('');\r\n    const [phone, setPhone] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [isPasswordVisible, setPasswordVisible] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n    const { error } = useSelector((state: RootStore) => state.login);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            if(error) {\r\n                dispatch('');\r\n            }\r\n        }\r\n    }, [error, dispatch]);\r\n\r\n  const usernameChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value.trim();\r\n    setUsername(value);\r\n  };\r\n\r\n  const passwordChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value;\r\n    setPassword(value);\r\n  };\r\n\r\n    const firstChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = e.target.value;\r\n        setFirst(value);\r\n    }\r\n\r\n  const lastChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value;\r\n    setLast(value);\r\n  };\r\n\r\n    const bdayChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = e.target.value;\r\n        setBirthday(value);\r\n    }\r\n\r\n    const phoneChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = e.target.value;\r\n        setPhone(value);\r\n    }\r\n\r\n    const submitHandler = async (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        const name = username.split(\"@\")[0]\r\n        console.log(name);\r\n        console.log(password,username)\r\n        Login.createAccount(name, password, username, first_name, last_name, birthday,\r\n             phone, name, name, \"Default profile.\").then((signUpResult: ISignUpResult) => {\r\n\r\n                // Signup complete, redirect to somewhere\r\n\r\n             }).catch(console.error);\r\n        /*setLoading(true);\r\n        await dispatch(signup({ username, password, first_name, last_name, birthday, phone }, () => setLoading(false)))\r\n        await dispatch(CreateUser({\r\n            \"username\": username,\r\n            \"password\": password,\r\n            \"first_name\": first_name,\r\n            \"last_name\": last_name,\r\n            \"birthday\": birthday,\r\n            \"phone\": phone,\r\n        }));\r\n\r\n        if(loading === false) {\r\n            window.location.reload();\r\n            window.location.href = \"/\";\r\n        }*/\r\n    }\r\n\r\n  return (\r\n            <div className=\"row bg-dark\">\r\n            <div className=\"col-6 ps-5 mt-5 mb-5\">\r\n                <Carousel />\r\n            </div>\r\n            <div className=\"col-6 pt-5 text-light\">\r\n                    <form className=\"text-center\" onSubmit={submitHandler}>\r\n                        <div className=\"form-group mb-2\">\r\n                            <h1>Register</h1>\r\n                            <br />\r\n                            <div className=\"row g-3 justify-content-center\">\r\n                                <div className=\"col-5\">\r\n                                    <label htmlFor=\"first_name\" className=\"form-label\">\r\n                                    <h6>First Name</h6>\r\n                                    <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    id=\"first_name\"\r\n                                    value={first_name}\r\n                                    onChange={firstChangeHandler}\r\n                                    required\r\n                                    />\r\n                                    </label>  \r\n                                </div>\r\n                                <div className=\"col-5\">\r\n                                <label htmlFor=\"last_name\" className=\"form-label\">\r\n                                    <h6>Last Name</h6>\r\n                                    <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    id=\"last_name\"\r\n                                    value={last_name}\r\n                                    onChange={lastChangeHandler}\r\n                                    required\r\n                                    />\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-2\">\r\n                            <label htmlFor=\"birthday\" className=\"form-label\">\r\n                                <h6>Birthday</h6>\r\n                            <input\r\n                            className=\"form-control\"\r\n                            type=\"date\"\r\n                            id=\"birthday\"\r\n                            min=\"1900-01-01\"\r\n                            max={Date.now()}\r\n                            placeholder=\"mm-dd-yy\"\r\n                            value={birthday}\r\n                            onChange={bdayChangeHandler}\r\n                            required\r\n                            />\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"form-group mb-2\">\r\n                            <label htmlFor=\"phone\" className=\"form-label\">\r\n                                <h6>Phone #</h6>\r\n                            <input\r\n                            className=\"form-control\"\r\n                            type=\"phone\"\r\n                            id=\"phone\"\r\n                            value={phone}\r\n                            placeholder=\"1-123-456-7890\"\r\n                            onChange={phoneChangeHandler}\r\n                            required\r\n                            />\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"form-group mb-2\">\r\n                            <label htmlFor=\"username\" className=\"form-label\">\r\n                                <h6>Email</h6>\r\n                            <input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            id=\"username\"\r\n                            value={username}\r\n                            onChange={usernameChangeHandler}\r\n                            required\r\n                            />\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"form-group mb-3\">\r\n                            <label htmlFor=\"password\" className=\"form-label\">\r\n                                <h6>Password</h6>\r\n                        <div className=\"row g-3\">\r\n                            <div className=\"col-11\">\r\n                            <input\r\n                            className=\"form-control\"\r\n                            type={isPasswordVisible ? \"text\" : \"password\"}\r\n                            id=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            aria-describedby=\"eye\"\r\n                            onChange={passwordChangeHandler}\r\n                            value={password}\r\n                            required\r\n                            />\r\n                            </div>\r\n                            <div className=\"col-1\">\r\n                                {isPasswordVisible ? (\r\n                                    <i className=\"bi bi-eye-fill\" \r\n                                    id=\"eye\" \r\n                                    onClick={() => setPasswordVisible(false)}\r\n                                    ></i>\r\n                                ) : (\r\n                                    <i className=\"bi bi-eye-slash\"\r\n                                    id=\"eye-slash\"\r\n                                    onClick={() => setPasswordVisible(true)}\r\n                                    ></i>\r\n                                )}\r\n                            </div>\r\n                            </div>\r\n                            </label>\r\n                        \r\n                        </div>\r\n                        <br />\r\n                        <div className=\"form-group\">\r\n                            <button className=\"btn btn-lg btn-outline-secondary\" type=\"submit\">Submit</button>\r\n                        </div>\r\n                        <br />\r\n                        <a href=\"/login\" className=\"link-light\">I have an account</a>\r\n                    </form>\r\n                    <br />\r\n                    <p className=\"bg-dark text-muted text-center \">&copy; Copyright 2021 Social Justice Warriors</p>\r\n                    </div>\r\n                </div>\r\n            \r\n  );\r\n};\r\n\r\nexport default Register;\r\n","export default __webpack_public_path__ + \"static/media/logo.407faa75.png\";","import React, { MouseEvent } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport logo from '../images/pics/logo.png';\r\nimport './Navigation.css';\r\nimport LoginCognito from '../../LoginCognito';\r\n\r\nconst Navbar: React.FC = () => {\r\n\r\n    const history = useHistory();\r\n    const routeChange = () => {\r\n      let path = \"/login\";\r\n      history.push(path);\r\n    };\r\n\r\n    const onLogout = async () => {\r\n        await LoginCognito.logout();\r\n        routeChange();\r\n    }\r\n    \r\n    const { pathname } = useLocation();\r\n    const hidePaths = ['/login', '/signup', '/', '/posts/add'];\r\n\r\n    return hidePaths.includes(pathname) && !LoginCognito.isLoggedIn() ? (\r\n        <nav className=\"navbar navbar-dark navbar-expand-lg bg-dark\">\r\n            <div className=\"container-fluid\">\r\n                <a href=\"/\" className=\"navbar-brand\">\r\n                    <img src={logo} alt='logo' width=\"50\" height=\"50\" className=\"d-inline-block align-text-top me-2\"/>\r\n                    The Social Justice Warriors\r\n                </a>\r\n                <button \r\n                className=\"navbar-toggler\"\r\n                type=\"button\" \r\n                data-bs-toggle=\"collapse\" \r\n                data-bs-target=\"#navbarContent\" \r\n                aria-controls=\"navbarContent\" \r\n                aria-expanded=\"false\" \r\n                aria-label=\"Toggle navigation\"\r\n                >\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarContent\">                  \r\n                    <ul className=\"navbar-nav ms-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a href=\"/login\" className=\"nav-link\">Login</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a href=\"/signup\" role=\"button\" className=\"btn btn-info\">Sign Up</a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav> \r\n    ) : (\r\n        <nav className=\"navbar navbar-dark navbar-expand-lg bg-dark\">\r\n            <div className=\"container-fluid\">\r\n                <a href=\"/\" className=\"navbar-brand\">\r\n                    <img src={logo} alt='logo' width=\"50\" height=\"50\" className=\"d-inline-block align-text-top me-2\"/>\r\n                    The Social Justice Warriors\r\n                </a>\r\n                <button \r\n                type=\"button\" \r\n                className=\"btn btn-danger\" \r\n                data-bs-toggle=\"modal\" \r\n                data-bs-target=\"#staticBackdrop\"\r\n                >\r\n                Logout\r\n                </button>\r\n                <div \r\n                    className=\"modal fade\" \r\n                    id=\"staticBackdrop\" \r\n                    data-bs-toggle=\"static\" \r\n                    data-bs-keyboard=\"false\" \r\n                    tabindex=\"-1\" \r\n                    aria-labelledby=\"staticBackdropLabel\" \r\n                    aria-hidden=\"true\">\r\n                    <div className=\"modal-dialog\">\r\n                        <div className=\"modal-content\">\r\n                            <div className=\"modal-header\">\r\n                                <h5 className=\"modal-title\" id=\"staticBackdropLabel\">Logging out?</h5>\r\n                                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                            </div>\r\n                            <div className=\"modal-footer\">\r\n                                <button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\r\n                                <button type=\"button\" className=\"btn btn-danger\" data-bs-dismiss=\"modal\" onClick={onLogout}>Logout</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav> \r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  CardText,\r\n  Row,\r\n  Col,\r\n} from \"reactstrap\";\r\nimport { RootState } from \"../../redux/reducers\";\r\n\r\nconst SocialPostComponent: React.FC = () => {\r\n  const posts = useSelector((state: RootState) => state.allPosts.posts);\r\n  const renderList = posts.map(\r\n    (post: {\r\n          username: string;\r\n          post_text: string;\r\n          post_id: string;\r\n          parent_post_id: string;\r\n          post_date_time: string;\r\n          main_post: number;\r\n          like: boolean;\r\n          dislikes: boolean;\r\n    }) => {\r\n      const {\r\n        username,\r\n        post_text,\r\n        post_id,\r\n        parent_post_id,\r\n        post_date_time,\r\n        main_post,\r\n        like,\r\n        dislikes,\r\n      } = post  \r\n\r\n      return (\r\n        <div>\r\n          <Row>\r\n            <Col sm=\"auto\" md={{ size: 12, offset: 0 }}>\r\n              <Card>\r\n                <CardBody>\r\n                  <CardTitle tag=\"h5\">{username}</CardTitle>\r\n                  <CardText></CardText>\r\n                  <CardText>{post_text}</CardText>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      );\r\n    }\r\n  );\r\n  return <>{renderList}</>;\r\n};\r\n\r\nexport default SocialPostComponent;\r\n","import { Button, FormGroup, Input, Label } from \"reactstrap\";\r\nimport axios from \"axios\";\r\nimport login from \"../../LoginCognito\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport SocialPostComponent from \"./SocialPost\";\r\nimport { setPost } from \"../../redux/actions/socialPostActions\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst PostForm: React.FC<{onPost: () => void}> = (props: any) => {\r\n  const [postText, setPostText] = useState(\"\");\r\n\r\n  const history = useHistory();\r\n  const routeChange = () => {\r\n    let path = \"/posts/added\";\r\n    history.push(path);\r\n  };\r\n\r\n  const postChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value;\r\n    setPostText(value);\r\n  };\r\n  const dispatch = useDispatch();\r\n  const helpMe = async() => {\r\n    try {\r\n      const response = await axios.get(\r\n        \"http://localhost:3001/api/home/post/getall\"\r\n      );\r\n      dispatch(setPost(response.data.posts.Items));\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n  const fetchPosts = async () => {\r\n    try {\r\n      const x = String(await login.getUserName());\r\n      console.log(x, postText);\r\n      await axios.post(\"http://localhost:3001/api/home/post/addpost\", {\r\n      socialPosts:{      \r\n            userName: x,\r\n            postText: postText,\r\n          },\r\n        }\r\n      );\r\n      routeChange();\r\n      props.onPost();\r\n      helpMe();\r\n      setPostText(\"\");\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <FormGroup className=\"mx-5\">\r\n        <Label for=\"postText\">Post</Label>\r\n        <Input \r\n        type=\"textarea\" \r\n        className=\"textarea\" \r\n        id=\"exampleText\"\r\n        value={postText}\r\n        rows=\"5\"\r\n        onChange={postChangeHandler}\r\n        placeholder=\"Write your post here...\"        \r\n        />\r\n      </FormGroup>\r\n      <Button className=\"mx-5 mt-3 btn-secondary btn-lg\" onClick={fetchPosts}>Post</Button>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default PostForm;\r\n","import React, { useState, useEffect, useCallback, useMemo } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setPost } from \"../../redux/actions/socialPostActions\";\r\nimport SocialPostComponent from \"./SocialPost\";\r\nimport { RootState } from \"../../redux/reducers\";\r\nimport { Col, Row } from \"reactstrap\";\r\nimport PostForm from \"./PostForm\";\r\n\r\nfunction useForceUpdate(): () => void{\r\n\r\n  const [value, setValue] = useState(0); \r\n\r\n  return () => setValue(value => value + 1); \r\n\r\n}\r\n\r\nconst SocialPostPage: React.FC = () => {\r\n  const useForceUpdateCall = useForceUpdate();\r\n  const posts = useSelector((state: RootState) => state.allPosts.posts);\r\n  const dispatch = useDispatch();\r\n  const fetchPosts = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        \"http://localhost:3001/api/home/post/getall\"\r\n      );\r\n      dispatch(setPost(response.data.posts.Items));\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  // fetchPosts();\r\n  useEffect(() => {\r\n    fetchPosts();\r\n  }, []);\r\n  console.log(posts);\r\n  return (\r\n    <div className='row'>\r\n      <div className=\"col-12 pt-3 justify-content-center\">\r\n        <PostForm onPost={useForceUpdateCall}/>\r\n      </div>\r\n      <div className=\"col-12 px-5 py-5\">\r\n        <SocialPostComponent />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SocialPostPage;\r\n","import './App.css';\r\nimport { useEffect } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { PublicRoute, Protected } from './routers/index';\r\nimport { useDispatch } from 'react-redux';\r\nimport { checkAuthSess } from './api';\r\nimport { loginSuccess } from './redux/actions/logRegAction';\r\nimport Login from './components/Login/Login';\r\nimport Register from './components/Register/Register';\r\nimport Navbar from './components/Navigation/Navigation';\r\nimport SocialPostList from './components/socialPost/SocialPostList';\r\n//import SocialPostAdd from './components/SocialPost/SocialPostAdd'; <Route path={'/posts/added'} component={SocialPostAdd} />\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <main className=\"bg-dark\">\r\n    <Navbar />\r\n        <Switch>\r\n          <Route path='/signup' component={Register} />\r\n          <Route path='/login' component={Login} />\r\n          <Route\r\n            path='/'\r\n            exact\r\n            render={(props:any) => <Login key={Date.now()} {...props} />}\r\n          />\r\n          <Route path={'/posts'} component={SocialPostList} />\r\n        </Switch>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export enum ActionType {\r\n    REGISTER_START = 'register-start',\r\n    REGISTER_SUCCESS = 'register-success',\r\n    LOGOUT_START = 'logout-start',\r\n    SET_USERNAME = 'set-username',\r\n    SET_LOADING = 'set-password',\r\n    AUTHENTICATED = 'authenticated',\r\n    SET_ERROR = 'set-error',\r\n    USER_LOADING = \"user-loading\",\r\n    USER_FAIL = \"user-fail\",\r\n    USER_SUCCESS = \"user-success\",\r\n    LOGIN_SUCCESS = \"login-success\"\r\n}","import { IPost } from \"../../models/socialPostModel\";\r\nimport { PostAction } from \"../actions/socialPostActions\";\r\n\r\nexport interface IAppState {\r\n    posts: IPost[];\r\n}\r\n\r\nconst initialState: IAppState = {\r\n  posts: [],\r\n};\r\n\r\nexport const socialPostReducer = (state = initialState, action: {type: any, payload: any }) => {\r\n    switch(action.type){\r\n        case PostAction.SET_POST:\r\n            return {...state, posts: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPostReducer = (state = initialState, action: {type: any, payload: any }) => {\r\n    switch(action.type){\r\n        case PostAction.ADD_POST:\r\n            return {...state, posts: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const getCommentsReducer = (state = initialState, action: {type: any, payload: any }) => {\r\n    switch(action.type){\r\n        case PostAction.GET_COMMENTS:\r\n            return {...state, posts: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const selectedPostReducer = (state = {}, action:  {type: any, payload: any}) =>{\r\n    switch(action.type){\r\n        case PostAction.SELECT_POST:\r\n            return {...state, ...action.payload}\r\n        case PostAction.REMOVE_SELECTED_POST:\r\n            return {}\r\n        default:\r\n            return state;\r\n    }\r\n}","import { ActionType } from '../action-types';\r\nimport { IErrorState } from '../types/types';\r\nimport { ErrorActionType } from '../actions/errorAction';\r\n\r\nconst initState: IErrorState = {\r\n    authError: null\r\n}\r\n\r\nconst errorReducer = (state = initState, action: ErrorActionType) => {\r\n    switch (action.type) {\r\n        case ActionType.SET_AUTH_ERR:\r\n        return {\r\n            ...state,\r\n            authError: action.payload\r\n        }\r\n        case ActionType.CLEAR_AUTH_ERR:\r\n        return {\r\n            ...state,\r\n            authError: null\r\n        }\r\n        default:\r\n        return state;\r\n    }\r\n};\r\n\r\nexport default errorReducer;","import { LoadingActionType } from \"../actions/loadingAction\";\r\nimport { ActionType } from \"../action-types\";\r\n\r\nconst initState = {\r\n    isLoadingAuth: false\r\n}\r\n\r\nconst loadingReducer = (state = initState, action: LoadingActionType ) => {\r\n    switch(action.type) {\r\n        case ActionType.SET_AUTH_LOADING:\r\n            return {\r\n                ...state,\r\n                isLoadingAuth: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default loadingReducer;","import {Authenticate, ILogin} from '../types/types';\r\nimport { ActionType } from \"../action-types\";\r\n\r\nexport const initState: ILogin = {\r\n    username: null,\r\n    authenticated: false,\r\n    loading: false,\r\n    setError: '',\r\n    success: ''\r\n}\r\n\r\nconst loginReducer = (state = initState, action: Authenticate) => {\r\n    switch (action.type) {\r\n        case ActionType.SET_USERNAME:\r\n            return {\r\n                ...state,\r\n                username: action.payload,\r\n                authenticated: true\r\n            }\r\n        case ActionType.SET_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: action.payload\r\n            }\r\n        case ActionType.LOGOUT_START:\r\n            return {\r\n                ...state,\r\n                username: null,\r\n                authenticated: false,\r\n                loading: false\r\n            }\r\n        case ActionType.LOGIN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                success: action.payload\r\n            }\r\n        case ActionType.SET_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default loginReducer;","import { combineReducers } from \"redux\";\r\nimport { socialPostReducer, selectedPostReducer, addPostReducer } from \"./socialPostReducers\";\r\nimport errorReducer from './errorReducer';\r\nimport loadingReducer from \"./loadingReducer\";\r\nimport loginRegReducer from \"./loginRegReducer\";\r\n\r\n\r\nexport const reducers = combineReducers({\r\n  allPosts: socialPostReducer,\r\n  addPost: addPostReducer,\r\n  getComments: socialPostReducer,\r\n  posts: selectedPostReducer,\r\n  login: loginRegReducer,\r\n  error: errorReducer,\r\n  loading: loadingReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof reducers>","import { applyMiddleware, compose, createStore } from \"redux\";\r\nimport {reducers} from './reducers/index';\r\nimport thunk from 'redux-thunk'\r\n\r\nconst w:any = window;\r\nconst composeEnhancers =\r\n  typeof window === 'object' &&\r\n  w.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \r\n    w.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n      // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\r\n    }) : compose;\r\n\r\nconst enhancer = composeEnhancers(\r\n  applyMiddleware(thunk),\r\n  // other store enhancers if any\r\n);\r\n\r\nexport const store = createStore(\r\n  reducers,\r\n  {}, \r\n  enhancer\r\n);\r\n\r\nexport type RootStore = \r\n  | ReturnType<typeof reducers>\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Provider } from 'react-redux';\r\nimport {store} from './redux/store';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport 'bootstrap-icons/font/bootstrap-icons.json';\r\nimport Amplify from 'aws-amplify';\r\nimport Authenticate from './components/Login/Authenticate.json'\r\n\r\n//To use Cognito, configure Amplify\r\nAmplify.configure({\r\n  Authenticate: {\r\n    mandatorySignId: true,\r\n    region: Authenticate.REGION,\r\n    userPoolId: Authenticate.USER_POOL_ID,\r\n    clientId: Authenticate.CLIENT_ID\r\n  }\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n"],"sourceRoot":""}