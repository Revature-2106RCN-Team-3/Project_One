{"version":3,"sources":["redux/action-types/index.ts","routers/PublicRoute.tsx","components/Login/withAuth.tsx","redux/actions/logRegAction.ts","redux/actions/socialPostActions.ts","redux/reducers/socialPostReducers.ts","redux/reducers/loginRegReducer.ts","redux/reducers/index.ts","redux/store.ts","api.ts","images/pics/peace.png","images/pics/logo_name.png","images/pics/safeSpace.png","components/carousel.tsx","components/Login/Login.tsx","components/Register/Register.tsx","components/images/pics/logo.png","components/Navigation/Navigation.tsx","components/socialPost/SocialPost.tsx","components/socialPost/SocialPostList.tsx","App.tsx","index.tsx"],"names":["ActionType","withAuth","Component","props","isAuth","useSelector","state","auth","username","component","rest","path","to","PostAction","loginStart","password","type","LOGIN_START","payload","loginSuccess","LOGIN_SUCCESS","registerStart","first_name","last_name","nickname","REGISTER_START","setPost","posts","SET_POST","initialState","initState","authReducer","action","LOGOUT_SUCCESS","REGISTER_SUCCESS","reducers","combineReducers","allPosts","SELECT_POST","REMOVE_SELECTED_POST","loginRegReducer","w","window","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","isLogoutClicked","resetIsLogoutClicked","axios","interceptors","response","use","error","callback","data","status","config","dispatch","LOGOUT_START","Promise","reject","checkAuthSess","a","get","req","resolve","Carousel","className","src","peace","alt","logo_name","safeSpace","Login","useState","setUsername","setPassword","isPasswordVisible","setPasswordVisible","useDispatch","submitHandler","e","preventDefault","onSubmit","htmlFor","id","autoComplete","value","onChange","target","trim","required","onClick","href","Date","getFullYear","Register","setNickname","setFirst","setLast","Navbar","logo","width","height","role","SocialPostComponent","renderList","map","post","post_text","post_id","parentPostId","post_date_time","mainPost","like","dislikes","Card","CardHeader","CardBody","CardTitle","tag","CardText","CardFooter","Button","SocialPostPage","fetchPosts","Items","console","log","useEffect","SocialPost","App","SocialPostList","exact","render","now","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.101d4cdf.chunk.js","sourcesContent":["export enum ActionType {\r\n    LOGIN_START = 'login-start',\r\n    LOGIN_SUCCESS = 'login-success',\r\n    LOGOUT_START = 'logout-start',\r\n    LOGOUT_SUCCESS = 'logout-success',\r\n    REGISTER_START = 'register-start',\r\n    REGISTER_SUCCESS = 'register-success',\r\n    CHECK_SESSION = 'check-sess'\r\n}","import { Redirect, Route } from 'react-router-dom';\r\nimport withAuth from '../components/Login/withAuth';\r\n\r\ninterface IProps {\r\n    component: React.ComponentType;\r\n    path: string;\r\n    isAuth: boolean;\r\n    [propName: string]: any;\r\n}\r\n\r\nconst PublicRoute: React.FC<IProps> = ({ isAuth, component: Component, path, ...rest }) => {\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            component={(props: any) => {\r\n                return isAuth ? <Redirect to='/' /> : <Component {...props} />\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default withAuth(PublicRoute);","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { IRootReducer } from \"../../types/types\";\r\n\r\ninterface IProps {\r\n    isAuth: boolean;\r\n}\r\n\r\nconst withAuth = <P extends IProps>(Component: React.ComponentType<P>) => {\r\n    return (props: Pick<P, Exclude<keyof P, keyof IProps>>) => {\r\n        const isAuth = useSelector((state: IRootReducer) => !!state.auth.username);\r\n\r\n        return <Component {...props as P} isAuth={isAuth} />\r\n    }\r\n};\r\n\r\nexport default withAuth;","import { IRegister, IUser } from '../../types/types';\r\nimport { ActionType } from '../action-types';\r\n\r\nexport const loginStart = (username: string, password: string) => (<const>{\r\n    type: ActionType.LOGIN_START,\r\n    payload: {\r\n        username,\r\n        password\r\n    }\r\n});\r\n\r\nexport const loginSuccess = (auth: IUser) => (<const>{\r\n    type: ActionType.LOGIN_SUCCESS,\r\n    payload: auth\r\n});\r\n\r\nexport const logoutStart = (callback?: () => void) => (<const>{\r\n    type: ActionType.LOGOUT_START,\r\n    payload: { callback }\r\n});\r\n\r\nexport const logoutSuccess = () => (<const>{\r\n    type: ActionType.LOGOUT_SUCCESS\r\n});\r\n\r\nexport const registerStart = ({ first_name, last_name, nickname, password, username }: IRegister) => (<const>{\r\n    type: ActionType.REGISTER_START,\r\n    payload: {\r\n        first_name,\r\n        last_name,\r\n        nickname,\r\n        password,\r\n        username\r\n    }\r\n});\r\n\r\nexport const registerSuccess = (userAuth: IUser) => (<const>{\r\n    type: ActionType.REGISTER_SUCCESS,\r\n    payload: userAuth\r\n});\r\n\r\nexport const checkSess = () => (<const>{\r\n    type: ActionType.CHECK_SESSION\r\n});\r\n\r\nexport type AuthActionType = \r\n    | ReturnType<typeof checkSess>\r\n    | ReturnType<typeof registerSuccess>\r\n    | ReturnType<typeof registerStart>\r\n    | ReturnType<typeof logoutSuccess>\r\n    | ReturnType<typeof logoutStart>\r\n    | ReturnType<typeof loginSuccess>\r\n    | ReturnType<typeof loginStart>","import { IPost } from \"../../models/socialPostModel\";\r\n\r\nexport enum PostAction {\r\n    // All you groovy post related actions\r\n    SET_POST = 'SET_POST',\r\n    ADD_POST = 'ADD_POST',\r\n    REMOVE_SELECTED_POST = 'REMOVE_POST',\r\n    EDIT_POST = 'EDIT_POST',\r\n    DELETE_POST = 'DELETE_POST',\r\n    SELECT_POST = 'SELECT_POST',\r\n    LIKE_POST = 'LIKE_POST',\r\n    DISLIKE_POST = 'DISLIKE_POST',\r\n    REPORT_POST = 'REPORT_POST',\r\n}\r\n\r\nexport interface IPostActions {\r\n    type: PostAction,\r\n    payload: {posts: IPost}\r\n}\r\n\r\nexport interface IAppActions extends IPostActions {\r\n    type: PostAction,\r\n    payload: {posts:IPost}\r\n}\r\n\r\nexport const setPost = (posts: IPost) => (<const>{\r\n        type: PostAction.SET_POST,\r\n        payload: posts,\r\n});\r\n\r\nexport const selectedPost = (postId: string) => {\r\n    return{ \r\n        type: PostAction.SELECT_POST,\r\n        payload: postId,\r\n    };\r\n};\r\n\r\nexport const removeSelectedPost = () => {\r\n    return{ \r\n        type: PostAction.REMOVE_SELECTED_POST,\r\n    };\r\n};","import { IPost } from \"../../models/socialPostModel\";\r\nimport { IAppActions, PostAction } from \"../actions/socialPostActions\";\r\n\r\nexport interface IAppState {\r\n    posts: IPost[];\r\n}\r\n\r\nconst initialState: IAppState = {\r\n  posts: [],\r\n};\r\n\r\nexport const socialPostReducer = (state = initialState, action: {type: any, payload: any }) => {\r\n    switch(action.type){\r\n        case PostAction.SET_POST:\r\n            return {...state, posts: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const selectedPostReducer = (state = {}, action:  {type: any, payload: any}) =>{\r\n    switch(action.type){\r\n        case PostAction.SELECT_POST:\r\n            return {...state, ...action.payload}\r\n        case PostAction.REMOVE_SELECTED_POST:\r\n            return {}\r\n        default:\r\n            return state;\r\n    }\r\n}","import { AuthActionType } from \"../actions/logRegAction\";\r\nimport { IUser } from \"../../types/types\";\r\nimport { ActionType } from \"../action-types\";\r\n\r\nconst initState: IUser = {\r\n    username: '',\r\n    nickname: ''\r\n}\r\n\r\nconst authReducer = (state = initState, action: AuthActionType) => {\r\n    switch (action.type) {\r\n        case ActionType.LOGIN_SUCCESS:\r\n            return action.payload;\r\n        case ActionType.LOGOUT_SUCCESS:\r\n            return initState;\r\n        case ActionType.REGISTER_SUCCESS:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default authReducer;","import { combineReducers } from \"redux\";\r\nimport { socialPostReducer, selectedPostReducer } from \"./socialPostReducers\";\r\nimport loginRegReducer from './loginRegReducer'\r\n\r\nexport const reducers = combineReducers({\r\n  allPosts: socialPostReducer,\r\n  posts: selectedPostReducer,\r\n  auth: loginRegReducer\r\n});\r\nexport type RootState = ReturnType<typeof reducers>","import { applyMiddleware, compose, createStore } from \"redux\";\r\nimport {reducers} from './reducers/index';\r\nimport thunk from 'redux-thunk'\r\n\r\nconst w:any = window;\r\nconst composeEnhancers =\r\n  typeof window === 'object' &&\r\n  w.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \r\n    w.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n      // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\r\n    }) : compose;\r\n\r\nconst enhancer = composeEnhancers(\r\n  applyMiddleware(thunk),\r\n  // other store enhancers if any\r\n);\r\nconst store = createStore(reducers,{}, enhancer);\r\n\r\nexport default store;\r\n\r\n","import axios from 'axios';\r\nimport { logoutStart } from './redux/actions/logRegAction';\r\nimport store from './redux/store';\r\nimport { IRegister } from './types/types'\r\n\r\n\r\nlet isLogoutClicked = false;\r\n\r\nconst resetIsLogoutClicked = () => {\r\n    isLogoutClicked = false;\r\n}\r\n\r\naxios.interceptors.response.use(\r\n    (response: any) => response,\r\n    (error: any) => {\r\n        const { data, status } = error.response;\r\n        if(\r\n            status === 401 &&\r\n            (data?.error?.type || '') !== \"INCORRECT_CRED\" &&\r\n            error.config\r\n        ) {\r\n            if (!isLogoutClicked) {\r\n                isLogoutClicked = true;\r\n                store.dispatch(logoutStart(resetIsLogoutClicked));\r\n            }\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport const login = async (username: string, password: string) => {\r\n    try {\r\n        const req = await axios.post('/login', {\r\n            username, \r\n            password\r\n        });\r\n\r\n        return Promise.resolve(req.data);\r\n    } catch (err) {\r\n        return Promise.reject(err?.response?.data || {});\r\n    }\r\n};\r\n\r\nexport const checkAuthSess = async () => {\r\n    try{\r\n        const req = await axios.get('/check');\r\n\r\n        return Promise.resolve(req.data);\r\n    } catch (err) {\r\n        return Promise.reject(err?.response?.data || {});\r\n    }\r\n};\r\n\r\nexport const register = async ({ username, password, nickname, first_name, last_name }: IRegister) => {\r\n    try {\r\n        const req = await axios.post('/register', {\r\n            username,\r\n            password,\r\n            nickname,\r\n            first_name,\r\n            last_name\r\n        });\r\n\r\n        return Promise.resolve(req.data);\r\n    } catch (err) {\r\n        return Promise.reject(err?.response?.data || {});\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/peace.19668b8d.png\";","export default __webpack_public_path__ + \"static/media/logo_name.0d4141c2.png\";","export default __webpack_public_path__ + \"static/media/safeSpace.cf6624ed.png\";","import peace from '../images/pics/peace.png';\r\nimport logo_name from '../images/pics/logo_name.png';\r\nimport safeSpace from '../images/pics/safeSpace.png'\r\n\r\nconst Carousel: React.FC = () => {\r\n    return (\r\n        <div className=\"carousel slide\" data-bs-ride=\"carousel\">\r\n            <div className=\"carousel-inner\">\r\n                <div className=\"carousel-item active\">\r\n                    <img src={peace} className=\"d-block w-100\" alt=\"peace\" />\r\n                </div>\r\n                <div className=\"carousel-item\">\r\n                    <img src={logo_name} className=\"d-block w-100\" alt=\"logo_name\" />\r\n                </div>\r\n                <div className=\"carousel-item\">\r\n                    <img src={safeSpace} className=\"d-block w-100\" alt=\"people\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Carousel;\r\n","import React, { FormEvent, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { loginStart } from '../../redux/actions/logRegAction';\r\nimport './Login.css';\r\nimport Carousel from \"../carousel\";\r\n\r\nconst Login: React.FC = () => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [isPasswordVisible, setPasswordVisible] = useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n    const usernameChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        //get rid of whitespaces\r\n        const value = e.target.value.trim();\r\n        setUsername(value);\r\n    }\r\n\r\n    const passwordChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = e.target.value;\r\n        setPassword(value);\r\n    }\r\n\r\n    const submitHandler = async (e: FormEvent) => {\r\n        e.preventDefault();\r\n\r\n        if(username && password) {\r\n            //way to authenticate user to go to their dashboard\r\n            dispatch(loginStart(username, password));\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"row bg-dark\">\r\n            <div className=\"col-6 ps-5 mt-5 mb-5\">\r\n                <Carousel />\r\n            </div>\r\n            <div className=\"col-6 justify-content-end mb-5 ps-5 text-light\">\r\n                    <form className=\"text-center\" onSubmit={submitHandler}>\r\n                        <div className=\"form-group mb-3\">\r\n                            <br />\r\n                            <br />\r\n                            <h1>Login</h1>\r\n                            <br />\r\n                            <label htmlFor=\"username\" className=\"form-label\">\r\n                                <h5>Username</h5>\r\n                            <input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            id=\"username\"\r\n                            autoComplete=\"username\"\r\n                            value={username}\r\n                            onChange={usernameChangeHandler}\r\n                            required\r\n                            />\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"form-group mb-3\">\r\n                            <label htmlFor=\"password\" className=\"form-label\">\r\n                                <h5>Password</h5>\r\n                        <div className=\"row g-3\">\r\n                            <div className=\"col-11\">\r\n                            <input\r\n                            className=\"form-control\"\r\n                            type={isPasswordVisible ? \"text\" : \"password\"}\r\n                            id=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            aria-describedby=\"eye\"\r\n                            onChange={passwordChangeHandler}\r\n                            value={password}\r\n                            required\r\n                            />\r\n                            </div>\r\n                            <div className=\"col-1\">\r\n                                {isPasswordVisible ? (\r\n                                    <i className=\"bi bi-eye-fill\" \r\n                                    id=\"eye\" \r\n                                    onClick={() => setPasswordVisible(false)}\r\n                                    ></i>\r\n                                ) : (\r\n                                    <i className=\"bi bi-eye-slash\"\r\n                                    id=\"eye-slash\"\r\n                                    onClick={() => setPasswordVisible(true)}\r\n                                    ></i>\r\n                                )}\r\n                            </div>\r\n                            </div>\r\n                            </label>\r\n                        </div>\r\n                        <br />\r\n                        <div className=\"form-group\">\r\n                            <button className=\"btn btn-lg btn-outline-secondary\" type=\"submit\">Login</button>\r\n                        </div>\r\n                        <br />\r\n                        <a href=\"/signup\" className=\"link-light\">I don't have an account</a>\r\n                    </form>\r\n                    <br />\r\n                    <p className=\"bg-dark text-muted text-center\">&copy; Copyright {new Date().getFullYear()} Social Justice Warriors</p>\r\n                    </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import React, { useState } from \"react\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { registerStart } from \"../../redux/actions/logRegAction\";\r\nimport Carousel from \"../carousel\";\r\n\r\n\r\nconst Register: React.FC = () => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [nickname, setNickname] = useState('');\r\n    const [first_name, setFirst] = useState('');\r\n    const [last_name, setLast] = useState('');\r\n    const [isPasswordVisible, setPasswordVisible] = useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n    const usernameChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = e.target.value.trim();\r\n        setUsername(value)\r\n    }\r\n\r\n    const passwordChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = e.target.value;\r\n        setPassword(value);\r\n    }\r\n\r\n    const nicknameChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = e.target.value;\r\n        setNickname(value);\r\n    }\r\n\r\n    const firstChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = e.target.value;\r\n        setFirst(value);\r\n    }\r\n\r\n    const lastChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = e.target.value;\r\n        setLast(value);\r\n    }\r\n\r\n    const submitHandler = async (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        if(username && password && first_name && last_name && nickname) {\r\n            //way to authenticate user to go to their dashboard\r\n            dispatch(registerStart({username, password, first_name, last_name, nickname}));\r\n        }\r\n    }\r\n\r\n    return (\r\n            <div className=\"row bg-dark\">\r\n            <div className=\"col-6 ps-5 mt-5 mb-5\">\r\n                <Carousel />\r\n            </div>\r\n            <div className=\"col-6 pt-5 text-light\">\r\n                    <form className=\"text-center\" onSubmit={submitHandler}>\r\n                        <div className=\"form-group mb-2\">\r\n                            <h1>Register</h1>\r\n                            <br />\r\n                            <div className=\"row g-3 justify-content-center\">\r\n                                <div className=\"col-5\">\r\n                                    <label htmlFor=\"first_name\" className=\"form-label\">\r\n                                    <h6>First Name</h6>\r\n                                    <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    id=\"first_name\"\r\n                                    onChange={firstChangeHandler}\r\n                                    required\r\n                                    />\r\n                                    </label>  \r\n                                </div>\r\n                                <div className=\"col-5\">\r\n                                <label htmlFor=\"last_name\" className=\"form-label\">\r\n                                    <h6>Last Name</h6>\r\n                                    <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    id=\"last_name\"\r\n                                    onChange={lastChangeHandler}\r\n                                    required\r\n                                    />\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mb-2\">\r\n                            <label htmlFor=\"nickname\" className=\"form-label\">\r\n                                <h6>Nickname</h6>\r\n                            <input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            id=\"nickname\"\r\n                            onChange={nicknameChangeHandler}\r\n                            required\r\n                            />\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"form-group mb-2\">\r\n                            <label htmlFor=\"username\" className=\"form-label\">\r\n                                <h6>Email</h6>\r\n                            <input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            id=\"username\"\r\n                            onChange={usernameChangeHandler}\r\n                            required\r\n                            />\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"form-group mb-3\">\r\n                            <label htmlFor=\"password\" className=\"form-label\">\r\n                                <h6>Password</h6>\r\n                        <div className=\"row g-3\">\r\n                            <div className=\"col-11\">\r\n                            <input\r\n                            className=\"form-control\"\r\n                            type={isPasswordVisible ? \"text\" : \"password\"}\r\n                            id=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            aria-describedby=\"eye\"\r\n                            onChange={passwordChangeHandler}\r\n                            value={password}\r\n                            required\r\n                            />\r\n                            </div>\r\n                            <div className=\"col-1\">\r\n                                {isPasswordVisible ? (\r\n                                    <i className=\"bi bi-eye-fill\" \r\n                                    id=\"eye\" \r\n                                    onClick={() => setPasswordVisible(false)}\r\n                                    ></i>\r\n                                ) : (\r\n                                    <i className=\"bi bi-eye-slash\"\r\n                                    id=\"eye-slash\"\r\n                                    onClick={() => setPasswordVisible(true)}\r\n                                    ></i>\r\n                                )}\r\n                            </div>\r\n                            </div>\r\n                            </label>\r\n                        \r\n                        </div>\r\n                        <br />\r\n                        <div className=\"form-group\">\r\n                            <button className=\"btn btn-lg btn-outline-secondary\" type=\"submit\">Submit</button>\r\n                        </div>\r\n                        <br />\r\n                        <a href=\"/login\" className=\"link-light\">I have an account</a>\r\n                    </form>\r\n                    <br />\r\n                    <p className=\"bg-dark text-muted text-center \">&copy; Copyright 2021 Social Justice Warriors</p>\r\n                    </div>\r\n                </div>\r\n    )\r\n}\r\n\r\nexport default Register;","export default __webpack_public_path__ + \"static/media/logo.407faa75.png\";","import React from 'react';\r\nimport logo from '../images/pics/logo.png';\r\nimport './Navigation.css';\r\n\r\nconst Navbar: React.FC = () => {\r\n    return(\r\n        <nav className=\"navbar navbar-dark navbar-expand-lg bg-dark\">\r\n            <div className=\"container-fluid\">\r\n                <a href=\"/\" className=\"navbar-brand\">\r\n                    <img src={logo} alt='logo' width=\"50\" height=\"50\" className=\"d-inline-block align-text-top me-2\"/>\r\n                    The Social Justice Warriors\r\n                </a>\r\n                <button \r\n                className=\"navbar-toggler\"\r\n                type=\"button\" \r\n                data-bs-toggle=\"collapse\" \r\n                data-bs-target=\"#navbarContent\" \r\n                aria-controls=\"navbarContent\" \r\n                aria-expanded=\"false\" \r\n                aria-label=\"Toggle navigation\"\r\n                >\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarContent\">                  \r\n                    <ul className=\"navbar-nav ms-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a href=\"/login\" className=\"nav-link\">Login</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a href=\"/signup\" role=\"button\" className=\"btn btn-info\">Sign Up</a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav> \r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardTitle,\r\n  CardText,\r\n  Button,\r\n  CardFooter,\r\n} from \"reactstrap\";\r\nimport { RootState } from \"../../redux/reducers\";\r\n\r\nconst SocialPostComponent: React.FC = () => {\r\n  const posts = useSelector((state: RootState) => state.allPosts.posts);\r\n  const renderList = posts.map(\r\n    (post: {\r\n      post: {\r\n        Items: {\r\n          userName: string;\r\n          postText: string;\r\n          postId: string;\r\n          parentPostId: string;\r\n          post_date_time: string;\r\n          mainPost: number;\r\n          like: boolean;\r\n          dislikes: boolean;\r\n        };\r\n      };\r\n    }) => {\r\n      const {\r\n        username,\r\n        post_text,\r\n        post_id,\r\n        parentPostId,\r\n        post_date_time,\r\n        mainPost,\r\n        like,\r\n        dislikes,\r\n      } = post;\r\n      return (\r\n        <div>\r\n          <Card>\r\n            <CardHeader>{username}</CardHeader>\r\n            <CardBody>\r\n              <CardTitle tag=\"h5\">{username}</CardTitle>\r\n              <CardText>{post_text}</CardText>\r\n            </CardBody>\r\n            <CardFooter>\r\n              <Link to={`/posts/${post_id}`}>\r\n                <Button>See Comments</Button>\r\n              </Link>\r\n            </CardFooter>\r\n          </Card>\r\n        </div>\r\n      );\r\n    }\r\n  );\r\n  return <>{renderList}</>;\r\n};\r\n\r\nexport default SocialPostComponent;\r\n","import React, { useEffect, useCallback, useMemo } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setPost } from \"../../redux/actions/socialPostActions\";\r\nimport SocialPostComponent from \"./SocialPost\";\r\nimport { RootState } from \"../../redux/reducers\";\r\n\r\nconst SocialPostPage: React.FC = () => {\r\n  const posts = useSelector((state: RootState) => state.allPosts.posts);\r\n  const dispatch = useDispatch();\r\n  const fetchPosts = async () => {\r\n    try{\r\n    const response = await axios\r\n      .get(\"http://localhost:3001/api/home/post/getall\")\r\n    dispatch(setPost(response.data.posts.Items));\r\n    }catch(err){\r\n      console.log(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    fetchPosts();\r\n  }, []);\r\n  console.log(posts)\r\n  return (\r\n    <div>\r\n      <SocialPostComponent />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SocialPostPage;\r\n","import React, { useEffect } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { PublicRoute } from './routers';\r\nimport { useDispatch } from 'react-redux';\r\nimport { checkAuthSess } from './api';\r\nimport { loginSuccess } from './redux/actions/logRegAction';\r\nimport Login from './components/Login/Login';\r\nimport Register from './components/Register/Register';\r\nimport Navbar from './components/Navigation/Navigation';\r\nimport SocialPostList from './components/socialPost/SocialPostList';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try{\r\n        const { auth } = await checkAuthSess();\r\n        dispatch(loginSuccess(auth));\r\n      } catch (err) {\r\n        console.log(\"ERROR\", err);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    <main className=\"bg-dark\">\r\n    <Navbar />\r\n        <Switch>\r\n          <PublicRoute path='/posts' component={SocialPostList} />\r\n          <PublicRoute path='/signup' component={Register} />\r\n          <PublicRoute path='/login' component={Login} />\r\n          <Route\r\n            path='/'\r\n            exact\r\n            render={(props:any) => <Login key={Date.now()} {...props} />}\r\n          />\r\n        </Switch>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport 'bootstrap-icons/font/bootstrap-icons.json';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n"],"sourceRoot":""}